<apex:page cache="false" controller="CaseFollowUpFormController" showHeader="false" standardStylesheets="false" docType="html-5.0">
   <html lang="en">
      <head>
         <meta charset="UTF-8" />
         <title>Customer Detail Form</title>
         <script>
            let modelDataCache = {};
            
            let selectedFiles = [];
            
            function handleFiles(newFiles) {
                const container = document.getElementById('fileFieldsContainer');
                const fileList = document.getElementById('fileList');
                const fileInput = document.getElementById('fileInput');
                const MAX_FILE_SIZE = 1 * 1024 * 1024 * 1024; // 2GB
                //const MAX_FILE_SIZE = 45 * 1024 * 1024; // 45MB
                
                // Filter and validate new files before adding them
                const validFiles = [];
                let hasRejectedFiles = false;
                
                Array.from(newFiles).forEach(newFile => {
                    if (newFile.size > MAX_FILE_SIZE) {
                        alert(`File "${newFile.name}" exceeds the 1GB size limit and will not be uploaded.`);
                        hasRejectedFiles = true;
                        return; // Skip this file
                    }
                    
                    // Check if file already exists
                    if (!selectedFiles.find(f => f.name === newFile.name && f.size === newFile.size)) {
                        validFiles.push(newFile);
                    }
                });
                
                // Add only valid files to selectedFiles
                selectedFiles.push(...validFiles);
                
                // If there were rejected files, clear and update the file input
                if (hasRejectedFiles) {
                    const dataTransfer = new DataTransfer();
                    selectedFiles.forEach(file => dataTransfer.items.add(file));
                    fileInput.files = dataTransfer.files;
                }
                
                // Clear containers
                container.innerHTML = '';
                fileList.innerHTML = '';
                
                // Process only the files that are in selectedFiles
                selectedFiles.forEach((file, index) => {
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        const base64 = e.target.result.split(',')[1];
                        
                        // Create hidden fields
                        const fileNameInput = document.createElement('input');
                        fileNameInput.type = 'hidden';
                        fileNameInput.name = 'fileName' + index;
                        fileNameInput.value = file.name;
                        
                        const fileContentInput = document.createElement('textarea');
                        fileContentInput.style.display = 'none';
                        fileContentInput.name = 'fileContent' + index;
                        fileContentInput.value = base64;
                        
                        container.appendChild(fileNameInput);
                        container.appendChild(fileContentInput);
                        
                        // Create UI display with remove button
                        const listItem = document.createElement('div');
                        listItem.style.marginBottom = '6px';
                        
                        const fileLabel = document.createElement('span');
                        fileLabel.textContent = file.name;
                        fileLabel.style.marginRight = '10px';
                        
                        const removeBtn = document.createElement('button');
                        removeBtn.textContent = 'Remove';
                        removeBtn.type = 'button';
                        removeBtn.style.color = 'red';
                        removeBtn.style.cursor = 'pointer';
                        removeBtn.style.border = 'none';
                        removeBtn.style.background = 'transparent';
                        
                        removeBtn.onclick = function() {
                            // Find the current index of this file (important for dynamic removal)
                            const currentIndex = selectedFiles.findIndex(f => f === file);
                            if (currentIndex > -1) {
                                selectedFiles.splice(currentIndex, 1);
                                updateFileInputAndDisplay();
                            }
                        };
                        
                        listItem.appendChild(fileLabel);
                        listItem.appendChild(removeBtn);
                        fileList.appendChild(listItem);
                    };
                    
                    reader.readAsDataURL(file);
                });
            }
            
            function updateFileInputAndDisplay() {
                const input = document.getElementById('fileInput');
                const dataTransfer = new DataTransfer();
                
                selectedFiles.forEach(file => dataTransfer.items.add(file));
                input.files = dataTransfer.files;
                
                handleFiles(input.files); // Refresh UI
            }
            
            function validatePicklist(id) {
                let field = document.getElementById(id);
                let errorSpan = document.getElementById(id + 'Error');
                if (!field.value || field.value.includes('-- Select')) {
                    field.style.border = '1px solid red';
                    errorSpan.innerText = 'This field is required.';
                } else {
                    field.style.border = '';
                    errorSpan.innerText = '';
                }
            }
            
            function validateBeforeSubmit() {
                validatePicklist('brand');
                validatePicklist('product');
                validatePicklist('model');
                validatePicklist('reason');
            
                let hasError = ['brand', 'product', 'model', 'reason'].some(id => {
                    return document.getElementById(id + 'Error').innerText !== '';
                });
            
                return !hasError;
            }
            
            function decodeHTML(input) {
                const txt = document.createElement("textarea");
                txt.innerHTML = input;
                return txt.value;
            }
            
            function populateProductDropdown() {
                const brand = document.getElementById("brand").value;
                const productDropdown = document.getElementById("product");
                productDropdown.innerHTML = '<option value="">-- Select Product --</option>';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.CaseFollowUpFormController.getModelMap}',
                    brand,
                    function(result, event) {
                        if (event.status && result) {
                            modelDataCache = result;
                            const productSet = new Set();
            
                            for (let productLine in result) {
                                productSet.add(productLine);
                            }
                            // Add each unique product line as an option
                            productSet.forEach(function(product) {
                                const option = document.createElement('option');
                                option.value = product;
                                option.textContent = product;
                                productDropdown.appendChild(option);
                            });
            
                            // Add "Product not listed here" option
                            const otherOption = document.createElement('option');
                            otherOption.value = 'Other';
                            otherOption.textContent = 'Product not listed here';
                            productDropdown.appendChild(otherOption);
                        }
                    }
                );
            }
            
            function populateModelNo() {
                const selectedProductLine = document.getElementById("product").value;
                const modelDropdown = document.getElementById("model");
            
                modelDropdown.innerHTML = '<option value="" disabled selected>-- Select Model --</option>';
            
                if (selectedProductLine === 'Other') {
                    const otherOption = document.createElement('option');
                    otherOption.value = 'Model Not Available';
                    otherOption.textContent = 'Model Not Available';
                    modelDropdown.appendChild(otherOption);
                    modelDropdown.value = 'Model Not Available';
                    return;
                }
            
                const models = modelDataCache[selectedProductLine];
            
                models.forEach(function(modelNumber) {
                    const option = document.createElement('option');
                    option.value = modelNumber;
                    option.textContent = modelNumber;
                    modelDropdown.appendChild(option);
                });
            
                const otherOption = document.createElement('option');
                otherOption.value = 'Other';
                otherOption.textContent = 'Model not listed here';
                modelDropdown.appendChild(otherOption);
            }
            
            function populateReasonOptions() {
                const reasonDropdown = document.getElementById("reason");
                reasonDropdown.innerHTML = '<option value="" disabled selected>-- Select Reason --</option>';
            
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.CaseFollowUpFormController.getReasonForContactOptions}',
                    function(result, event) {
                        if (event.status && result) {
                            result.forEach(function(reason) {
                                const option = document.createElement("option");
                                option.value = reason;
                                option.textContent = reason;
                                reasonDropdown.appendChild(option);
                            });
                        } else {
                            console.error("Failed to fetch reasons:", event.message);
                        }
                    }
                );
            }
            
            function populateBrandDropdown() {
                const brandDropdown = document.getElementById("brand");
                brandDropdown.innerHTML = '<option value="" disabled selected>-- Select Brand --</option>';
            
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.CaseFollowUpFormController.getBrandOptions}',
                    function(result, event) {
                        if (event.status && result) {
                            result.forEach(function(brand) {
                                const option = document.createElement("option");
                                option.value = decodeHTML(brand);
                                option.textContent = decodeHTML(brand);   
                                brandDropdown.appendChild(option);
                            });
                        } else {
                            console.error("Failed to fetch brand picklist:", event.message);
                        }
                    }
                );
            }
            
            
         </script>
         <style>
            * {
            box-sizing: border-box;
            }
            body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f4f6f9;
            padding: 30px 15px;
            margin: 0;
            }
            .form-container {
            background: #fff;
            padding: 40px 30px;
            border-radius: 12px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.06);
            max-width: 700px;
            margin: auto;
            }
            .form-title {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 12px;
            font-size: 26px;
            font-weight: 600;
            }
            .case-info {
            text-align: center;
            color: #5d6d7e;
            margin-bottom: 35px;
            padding: 12px;
            background: #eaf4ff;
            border-left: 5px solid #0070d2;
            border-radius: 8px;
            font-size: 15px;
            }
            .form-row {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            column-gap: 24px; /* or use gap: 24px; for both row/column */
            margin-bottom: 20px;
            }
            .form-group {
            width: 48%;
            min-width: 250px;
            margin-bottom: 0;
            }
            .half-width {
            flex: 1 1 48%;
            }
            label {
            display: block;
            margin-bottom: 6px;
            font-weight: 600;
            color: #2f4050;
            font-size: 14px;
            }
            .required {
            color: #e74c3c;
            margin-left: 5px;
            font-weight: normal;
            }
            input[type="text"],
            input[type="email"],
            input[type="tel"],
            select,
            textarea {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 14px;
            background: #fdfdfd;
            }
            input:focus,
            select:focus,
            textarea:focus {
            border-color: #0070d2;
            box-shadow: 0 0 4px rgba(0, 112, 210, 0.4);
            outline: none;
            }
            textarea {
            resize: vertical;
            min-height: 90px;
            }
            .submit-btn {
            width: 100%;
            background: #0070d2;
            color: white;
            border: none;
            padding: 14px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            }
            .submit-btn:hover:not(:disabled) {
            background: #005bb5;
            }
            .submit-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            }
            .success-message,
            .error-message {
            text-align: center;
            padding: 30px;
            border-radius: 10px;
            font-size: 16px;
            line-height: 1.5;
            }
            .success-message {
            background: #e8f6f0;
            border: 1px solid #b7e1d1;
            color: #2e7d32;
            }
            .error-message {
            background: #fdecea;
            border: 1px solid #f5c2c7;
            color: #b02a37;
            }
            ul {
            text-align: left;
            padding-left: 20px;
            }
            .loader {
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            background: rgba(255,255,255,0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            }
            .spinner {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #3498db;
            border-radius: 50%;
            width: 60px; height: 60px;
            animation: spin 1s linear infinite;
            }
            .file-upload {
            padding: 10px 12px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 14px;
            background: #fdfdfd;
            width: 100%;
            }
            .custom-file-input {
            display: block;
            width: 100%;
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ccc;
            }
            .tooltip-icon {
            display: inline-block;
            margin-left: 5px;
            cursor: pointer;
            position: relative;
            color: #0070d2;
            font-weight: bold;
            }
            .tooltip-icon:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
            }
            .tooltip-text {
            visibility: hidden;
            opacity: 0;
            width: 220px;
            background-color: #333;
            color: #fff;
            text-align: left;
            border-radius: 4px;
            padding: 6px 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: -90px;
            transition: opacity 0.3s;
            font-size: 12px;
            white-space: normal;
            }
            @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
            }
            @media (max-width: 600px) {
            .half-width {
            flex: 1 1 100%;
            }
            }
         </style>
      </head>
      <body onload="populateReasonOptions(); populateBrandDropdown();">
         <apex:outputPanel id="mainPanel">
            <apex:outputPanel rendered="{!isValidTicket && !isSubmitted}">
               <div class="form-container">
                  <h2 class="form-title">Customer Detail Form</h2>
                  <div class="case-info">
                     <strong>Case Number:</strong> {!ticketNumber}<br/>
                     <small>Please provide additional product details</small>
                  </div>
                  <apex:form id="followupForm" onsubmit="return validateBeforeSubmit();">
                     <apex:pageMessages />
                     <input type="hidden" name="debug" value="1"/>                              
                     <input type="hidden" name="debugEmail" value="Mohit.Agarwal@themetromaxgroup.com"/>
                     <div class="form-row">
                        <div class="form-group half-width">
                           <label>Name<span class="required">*</span></label>
                           <input type="text" name="name" required = "required" value="{!customerName}"/>
                        </div>
                        <div class="form-group half-width">
                           <label>Email<span class="required">*</span></label>
                           <input type="email" name="email" required = "required"  value="{!customerEmail}"/>
                        </div>
                     </div>
                     <div class="form-row">
                        <div class="form-group half-width">
                           <label>Phone<span class="required">*</span></label>
                           <input type="tel" name="phone" pattern="^\d{10}$" required = "required" title="Please enter a valid phone number with 10 digits only."/>
                        </div>
                        <div class="form-group half-width">
                           <label for="brand">Select Brand<span class="required">*</span></label>
                           <select id="brand" name="Brand__c" required = "required" onchange="populateProductDropdown()">
                           </select>
                           <span id="brandError" style="color:red; font-size:12px;"></span>
                        </div>
                     </div>
                     <div class="form-row">
                        <div class="form-group half-width">
                           <label for="product">Select Product<span class="required">*</span></label>
                           <select id="product" name="Raw_Product_Line__c" required = "required" onchange="populateModelNo()">
                              <option value="" disabled="disabled" selected="selected">-- Select Product --</option>
                           </select>
                           <span id="productError" style="color:red; font-size:12px;"></span>
                        </div>
                        <div class="form-group half-width">
                           <label for="model">Select Model<span class="required">*</span></label>
                           <select id="model" name="Raw_Model_Number__c" required = "required" >
                              <option value="" disabled="disabled" selected="selected">-- Select Model --</option>
                           </select>
                           <span id="modelError" style="color:red; font-size:12px;"></span>
                        </div>
                     </div>
                     <div class="form-row">
                        <div class="form-group">
                           <label>Briefly summarize your issue"<span class="required">*</span></label>
                           <input type="text" name="subject" required = "required" />
                        </div>
                        <div class="form-group half-width">
                           <label for="reason">Reason for Contact<span class="required">*</span></label>
                           <select id="reason" name="Reason_for_Contact__c" required="required">
                           </select>
                           <span id="reasonError" style="color:red; font-size:12px;"></span>
                        </div>
                     </div>
                     <div class="form-row">
                        <div class="form-group">
                           <label>Please describe you issue in detail<span class="required">*</span></label>
                           <textarea id="issueDescription" name="description" required = "required"></textarea>
                        </div>
                     </div>
                     <label for="fileInput" class="custom-upload-label">
                     Add Attachments (optional)
                     <span class="tooltip-icon">ⓘ
                     <span class="tooltip-text">
                     You can attach multiple files like images or documents. Max 1GB each.
                     </span>
                     </span>
                     </label>
                     <input type="file" id="fileInput" multiple="multiple" onchange="handleFiles(this.files)" class="custom-file-input" />
                     <div id="fileList" style="margin-top: 10px;"></div>
                     <div id="fileFieldsContainer"></div>
                     <!-- <input type="file" id="fileInput" onchange="handleFile(this.files[0])" />
                        <input type="hidden" name="fileName" id="fileName" />
                        <textarea name="fileContent" id="fileContent" style="display:none;"></textarea> -->
                     <apex:commandButton action="{!submitForm}" 
                        id="submitBtn"
                        value="Submit" 
                        styleClass="submit-btn"
                        rerender="mainPanel"
                        status="loaderStatus"/>
                  </apex:form>
               </div>
            </apex:outputPanel>
            <apex:outputPanel rendered="{!isValidTicket && isSubmitted}">
               <div class="form-container">
                  <div class="success-message">
                     <h2>Thank You!</h2>
                     <p><strong>Your case {!ticketNumber} has been updated successfully.</strong></p>
                     <p>We have received your product details and issue description.</p>
                     <p>Our support team will contact you soon.</p>
                     <br/>
                     <small><em>This form has been submitted and cannot be resubmitted.</em></small>
                  </div>
               </div>
            </apex:outputPanel>
            <apex:outputPanel rendered="{!NOT(isValidTicket)}">
               <div class="form-container">
                  <div class="error-message">
                     <h2>Access Denied</h2>
                     <p><strong>Invalid or expired ticket number.</strong></p>
                     <ul>
                        <li>Modified ticket number</li>
                        <li>Already processed case</li>
                        <li>Link expired</li>
                     </ul>
                     <p>Please contact support or check your email for the correct link.</p>
                  </div>
               </div>
            </apex:outputPanel>
         </apex:outputPanel>
         <apex:actionStatus id="loaderStatus">
            <apex:facet name="start">
               <div class="loader">
                  <div class="spinner"></div>
               </div>
            </apex:facet>
         </apex:actionStatus>
      </body>
   </html>
</apex:page>